{"version":3,"sources":["firebase/firebase.js","functions/getLocation.js","components/form.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","database","getLocationFromIp","a","axios","get","resp","res","override","css","Confessionform","useState","loading","setLoading","onFinish","values","userLocation","error","notification","message","description","console","log","ref","push","set","sentBy","username","confession","ConfeessionFor","confesse","country","data","state","regionName","city","zipCode","zip","isp","latitude","lat","longitude","lon","ipAddress","query","success","color","size","style","alignItems","Item","label","name","placeholder","TextArea","xs","sm","md","type","htmlType","span","App","useEffect","timer1","setTimeout","clearTimeout","marginTop","textAlign","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.162b3ef6.chunk.js","sourcesContent":["import firebase from 'firebase';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\r\n    authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\r\n    databaseURL: process.env.REACT_APP_DB_URL,\r\n    projectId: process.env.REACT_APP_PROJECT_ID,\r\n    storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n    messagingSenderId: process.env.REACT_APP_MESSAGING_ID,\r\n    appId: process.env.REACT_APP_FIREBASE_APP_ID,\r\n    measurementId: process.env.REACT_APP_MEASUREMENT_ID\r\n};\r\n    \r\nfirebase.initializeApp(firebaseConfig);\r\nvar database = firebase.database();\r\n  \r\nexport default database;","import axios from \"axios\";\r\nvar url=\"http://ip-api.com/json/\";\r\n\r\nconst getLocationFromIp = async() =>{        \r\n    try{\r\n        var resp = await axios.get(url);\r\n        return resp;\r\n    }catch(err){\r\n        var res={\r\n            \"error\":\"AD Block!\"\r\n        }\r\n        return res;\r\n    }\r\n}\r\n\r\nexport default getLocationFromIp;","import React ,{useState} from \"react\";\r\nimport { Form, Input, Button,Row,Col,notification } from \"antd\";\r\nimport BeatLoader from \"react-spinners/BeatLoader\";\r\nimport { css } from \"@emotion/react\";\r\n\r\nimport database from \"../firebase/firebase\";\r\nimport getLocationFromIp from \"../functions/getLocation\";\r\nimport \"./form.css\";\r\n\r\nconst override = css`\r\n  display: block;\r\n  margin: 0 auto;\r\n  border-color: red;\r\n`;\r\n\r\nconst Confessionform = () => {\r\n\r\n    const [loading, setLoading] = useState(false);\r\n\r\n  const onFinish = async (values) => {\r\n    setLoading(true);    \r\n    var userLocation=await getLocationFromIp();\r\n    if(userLocation.error)\r\n    {\r\n      notification.error({\r\n        message:'Ad Block detected!',\r\n        description:'Please disable ad block!'\r\n      });\r\n      setLoading(false);\r\n      return ;\r\n    }\r\n    console.log(\"Sending\");\r\n    var newMessage=database.ref('messages').push();\r\n    newMessage.set({\r\n      sentBy:values.username,\r\n      confession:values.confession,\r\n      ConfeessionFor:values.confesse,\r\n      country:userLocation.data.country,\r\n      state:userLocation.data.regionName,\r\n      city:userLocation.data.city,\r\n      zipCode:userLocation.data.zip,\r\n      isp:userLocation.data.isp,\r\n      latitude:userLocation.data.lat,\r\n      longitude:userLocation.data.lon,\r\n      ipAddress:userLocation.data.query\r\n    })\r\n    console.log(\"Sent too much! ;)\");\r\n    notification.success({\r\n      message:'Sent!'\r\n    });\r\n    setLoading(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <BeatLoader color=\"white\" loading={loading} css={override} size={40} />\r\n      <Form onFinish={onFinish} style={{alignItems:\"center\"}}>\r\n        <Form.Item label=\"Username\" name=\"username\">\r\n          <Input placeholder=\"Give yourself any name!\" />\r\n        </Form.Item>\r\n        <Form.Item label=\"Confess to\" name=\"confesse\">\r\n          <Input placeholder=\"Name\" />\r\n        </Form.Item>\r\n        <Form.Item label=\"Confession\" name=\"confession\">\r\n          <Input.TextArea placeholder=\"Confession here\" />\r\n        </Form.Item>\r\n        <Form.Item>\r\n        <Row>\r\n            <Col xs={100} sm={100} md={12}/>\r\n            <Col>\r\n            <Button type=\"primary\" htmlType=\"submit\">\r\n          Submit\r\n        </Button>\r\n            </Col>\r\n            <Col span={5}/>\r\n        </Row>        \r\n        </Form.Item>\r\n      </Form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Confessionform;\r\n","import React, { useState, useEffect } from \"react\";\nimport { Row, Col } from \"antd\";\nimport Confessionform from \"./components/form\";\nimport { css } from \"@emotion/react\";\nimport ClimbingBoxLoader from \"react-spinners/ClimbingBoxLoader\";\n\nimport \"antd/dist/antd.css\";\nimport \"./App.css\";\n\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  border-color: red;\n`;\n\nfunction App() {\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    let timer1 = setTimeout(() => setLoading(false), 1500);\n    return () => {\n      clearTimeout(timer1);\n    };\n  }, []);\n\n  return loading ? (\n    <div>\n      <Row style={{ marginTop: \"12vh\", textAlign: \"center\" }}>\n      <ClimbingBoxLoader color=\"white\" loading={loading} css={override} size={40} />\n      </Row>\n    </div>\n  ) : (\n    <div>\n      <Row style={{ marginTop: \"12vh\", textAlign: \"center\" }}>\n        <Col span={8} />\n        <Col span={8}>\n          <h1 className=\"heading\">Confess here</h1>\n          <Confessionform />\n        </Col>\n        <Col span={8} />\n      </Row>\n    </div>\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}